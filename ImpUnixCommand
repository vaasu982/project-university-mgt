
* Create zip file of all older than x days:

find . -type f -name "*.log*" -mtime +10 | xargs zip ./old_log_$(date +%F).zip

* Delete file after taking backup

find . -type f -name "*.log*" -mtime +10 -exec rm {} \;

* Scp commad

scp username@vis2323e23.srv.net:/local/logs/*.zip .

scp /tmp/mark/*.zip username@vis2323e23.srv.net:/tmp/mark/logs/

*
grep -rnw '/local/apps/logs' -e "VC161402165" 

Run this in current dir. It will search all subdir recursively 

find . -name "*.sh" -print0 | xargs -0 egrep "bjob.enable" | more 

*

package com.topkjava;

import java.util.PriorityQueue;
import java.util.TreeMap;

import com.topK.TopKthString;

public class TopKthWord {
	public static final int MAX_CHARS = 26;
	public static final int MAX_WORD_SIZE = 30;
	TrieNode root = newTrieNode();;
	PriorityQueue<MinHeapNode> minHeap = null;

	public static void main(String[] args) {
		int k = 5;
		String fp = "Welcome to the world of Geeks This portal has been created to provide well written well thought and well explained solutions for selected questions If you like Geeks for Geeks and would like to contribute here is your chance You can write article and mail your article to contribute at geeksforgeeks org See your article appearing on the Geeks for Geeks main page and help thousands of other Geeks";
		new TopKthWord().printKMostFreq(fp, k);
	}

	// A utility function to create a new Trie node
	public TrieNode newTrieNode() {
		// Allocate memory for Trie Node
		TrieNode trieNode = new TrieNode();

		// Initialize values for new node
		trieNode.isEnd = false;
		trieNode.frequency = 0;
		trieNode.indexMinHeap = -1;
		for (int i = 0; i < MAX_CHARS; ++i)
			trieNode.child[i] = null;

		return trieNode;
	}

	// Inserts a word to heap, the function handles the 3 cases explained above
	void insertInMinHeap(TrieNode root, final String word) {
		MinHeapNode node = new MinHeapNode();
		node.frequency = root.frequency;
		node.word = word;
		node.root = root;

		if (minHeap.contains(node)) {
			minHeap.remove(node);

		} else if (minHeap.size() > 4) {
			MinHeapNode val = minHeap.peek();
			if (val.frequency < node.frequency) {
				MinHeapNode pooled = minHeap.poll();

				// System.out.println("Pooled:"+ pooled.word + " "+pooled.frequency);
			} else {
				// System.out.println("Ignored ========>> "+node.word + " "+node.frequency);
				return;
			}

		}
		minHeap.add(node);

	}

	// Inserts a new word to both Trie and Heap
	void insertUtil(TrieNode root, PriorityQueue minHeap, String word, String dupWord) {
		// There are still more characters in word
		if (word != null && word.length() > 0) {
			int idx = Character.toLowerCase(word.charAt(0)) - 97;
			// System.out.println("idx:"+idx);
			if (root.child[idx] == null) {
				root.child[idx] = newTrieNode();
			}
			insertUtil(root.child[idx], minHeap, word.substring(1), dupWord);
		} else {
			if (root.isEnd)
				++root.frequency;
			else {
				root.isEnd = true;
				root.frequency = 1;
			}
			insertInMinHeap(root, dupWord);
		}

	}

	// add a word to Trie & min heap. A wrapper over the insertUtil
	void insertTrieAndHeap(String word, TrieNode root) {
		insertUtil(root, minHeap, word, word);
	}

	// A utility function to show results, The min heap
	// contains k most frequent words so far, at any time
	void displayMinHeap() {
		for (int i = 0; !minHeap.isEmpty(); i++) {
			MinHeapNode minHeapNode = minHeap.poll();
			System.out.println(minHeapNode.word + "  " + minHeapNode.frequency);
			// System.out.println("===="+ minHeapNode.root.frequency);
		}

	}

	// The main funtion that takes a file as input, add words to heap
	// and Trie, finally shows result from heap
	void printKMostFreq(String fp, int k) {
		// Create a Min Heap of Size k

		minHeap = new PriorityQueue<>(k, (o1, o2) -> {
			return o1.frequency - o2.frequency;
		});

		// Create an empty Trie

		// A buffer to store one word at a time
		for (String buffer : fp.split(" ")) {
			insertTrieAndHeap(buffer, root);

		}
		displayMinHeap();

	}

}

class TrieNode {
	boolean isEnd; // indicates end of word
	int frequency; // the number of occurrences of a word
	int indexMinHeap; // the index of the word in minHeap
	TrieNode[] child = new TrieNode[TopKthString.MAX_CHARS]; // represents 26 slots each for 'a' to 'z'.
}

// A Min Heap node
class MinHeapNode {
	public TrieNode root; // indicates the leaf node of TRIE
	public int frequency; // number of occurrences
	public String word; // the actual word stored

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((word == null) ? 0 : word.toLowerCase().hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		MinHeapNode other = (MinHeapNode) obj;
		if (word == null) {
			if (other.word != null)
				return false;
		} else if (!word.equalsIgnoreCase(other.word))
			return false;
		return true;
	}

}

// A Min Heap
class MinHeap {
	int capacity; // the total size a min heap
	int count; // indicates the number of slots filled.
	MinHeapNode[] array; // represents the collection of minHeapNodes
}
================================================
package com.topK;

public class TopKthString {
	public static final int MAX_CHARS =26;
	public static final int MAX_WORD_SIZE =30;
	
	public static void main(String[] args) {
		 int k=5;
		 String  fp="Welcome to the world of Geeks This portal has been created to provide well written well thought and well explained solutions for selected questions If you like Geeks for Geeks and would like to contribute here is your chance You can write article and mail your article to contribute at geeksforgeeks org See your article appearing on the Geeks for Geeks main page and help thousands of other Geeks";
		 new TopKthString().printKMostFreq (fp, k);
	}
	
//A utility function to create a new Trie node
	public TrieNode newTrieNode()
	{
	    // Allocate memory for Trie Node
	    TrieNode trieNode = new TrieNode();
	 
	    // Initialize values for new node
	    trieNode.isEnd = false;
	    trieNode.frequency = 0;
	    trieNode.indexMinHeap = -1;
	    for( int i = 0; i < MAX_CHARS; ++i )
	        trieNode.child[i] = null;
	 
	    return trieNode;
	}
	
//A utility function to create a Min Heap of given capacity
public MinHeap createMinHeap( int capacity )
{
   MinHeap minHeap = new MinHeap();

   minHeap.capacity = capacity;
   minHeap.count  = 0;
   // Allocate memory for array of min heap nodes
   minHeap.array = new MinHeapNode [ minHeap.capacity ];

   return minHeap;
}

//A utility function to swap two min heap nodes. This function
//is needed in minHeapify
void swapMinHeapNodes ( MinHeapNode a, MinHeapNode b )
{
 MinHeapNode temp = a;
 a = b;
 b = temp;
}

void minHeapify( MinHeap minHeap, int idx )
{
    int left, right, smallest;
 
    left = 2 * idx + 1;
    right = 2 * idx + 2;
    smallest = idx;
    if ( left < minHeap.count &&
         minHeap.array[ left ]. frequency <
         minHeap.array[ smallest ]. frequency
       )
        smallest = left;
 
    if ( right < minHeap.count &&
         minHeap.array[ right ]. frequency <
         minHeap.array[ smallest ]. frequency
       )
        smallest = right;
 
    if( smallest != idx )
    {
        // Update the corresponding index in Trie node.
        minHeap.array[ smallest ]. root.indexMinHeap = idx;
        minHeap.array[ idx ]. root.indexMinHeap = smallest;
 
        // Swap nodes in min heap
        swapMinHeapNodes (minHeap.array[ smallest ], minHeap.array[ idx ]);
 
        minHeapify( minHeap, smallest );
    }
}



//A standard function to build a heap
void buildMinHeap( MinHeap minHeap )
{
 int n, i;
 n = minHeap.count - 1;

 for( i = ( n - 1 ) / 2; i >= 0; --i )
     minHeapify( minHeap, i );
}

//Inserts a word to heap, the function handles the 3 cases explained above
void insertInMinHeap( MinHeap minHeap, TrieNode root, final String word )
{
 // Case 1: the word is already present in minHeap
 if( root.indexMinHeap != -1 )
 {
     ++( minHeap.array[ (root).indexMinHeap ]. frequency );

     // percolate down
     minHeapify( minHeap, (root).indexMinHeap );
 }

 // Case 2: Word is not present and heap is not full
 else if( minHeap.count < minHeap.capacity )
 {
     int count = minHeap.count;
     minHeap.array[ count ]. frequency = root.frequency;
     minHeap.array[ count ]. word = word;
    // strcpy( minHeap.array[ count ]. word, word );

     minHeap.array[ count ]. root = root;
     (root).indexMinHeap = minHeap.count;

     ++( minHeap.count );
     buildMinHeap( minHeap );
 }

 // Case 3: Word is not present and heap is full. And frequency of word
 // is more than root. The root is the least frequent word in heap,
 // replace root with new word
 else if ( (root).frequency > minHeap.array[0]. frequency )
 {

     minHeap.array[ 0 ]. root.indexMinHeap = -1;
     minHeap.array[ 0 ]. root = root;
     minHeap.array[ 0 ]. root.indexMinHeap = 0;
     minHeap.array[ 0 ]. frequency = (root).frequency;

     // delete previously allocated memoory and
    // delete [] minHeap.array[ 0 ]. word;
     minHeap.array[ 0 ]. word = word;

     minHeapify ( minHeap, 0 );
 }
}

//Inserts a new word to both Trie and Heap
void insertUtil ( TrieNode root, MinHeap minHeap,
                     String word, String dupWord )
{
 // Base Case
 if ( root == null )
     root = newTrieNode();

 //  There are still more characters in word
 if ( word != null )
     insertUtil ( ((root).child[ word.toLowerCase().charAt(0) - 97 ]),
                      minHeap, word + 1, dupWord );
 else // The complete word is processed
 {
     // word is already present, increase the frequency
     if ( (root).isEnd )
         ++( (root).frequency );
     else
     {
         (root).isEnd = true;
         (root).frequency = 1;
     }

     // Insert in min heap also
     insertInMinHeap( minHeap, root, dupWord );
 }
}


//add a word to Trie & min heap.  A wrapper over the insertUtil
void insertTrieAndHeap(String word, TrieNode root, MinHeap minHeap)
{
 insertUtil( root, minHeap, word, word );
}

//A utility function to show results, The min heap
//contains k most frequent words so far, at any time
void displayMinHeap( MinHeap minHeap )
{
 int i;

 // print top K word with frequency
 for( i = 0; i < minHeap.count; ++i )
 {
     System.out.printf( "%s : %d\n", minHeap.array[i].word,
                         minHeap.array[i].frequency );
 }
}

//The main funtion that takes a file as input, add words to heap
//and Trie, finally shows result from heap
void printKMostFreq( String fp, int k )
{
 // Create a Min Heap of Size k
 MinHeap minHeap = createMinHeap( k );
 
 // Create an empty Trie
 TrieNode root = null;

 // A buffer to store one word at a time
 for(String buffer:fp.split(" ")){
	 insertTrieAndHeap(buffer, root, minHeap);

 }

 displayMinHeap( minHeap );
}

}
class TrieNode
{
    boolean isEnd; // indicates end of word
    int frequency;  // the number of occurrences of a word
    int indexMinHeap; // the index of the word in minHeap
    TrieNode []child = new TrieNode[TopKthString.MAX_CHARS]; // represents 26 slots each for 'a' to 'z'.
}
 
// A Min Heap node
class MinHeapNode
{
	TrieNode root; // indicates the leaf node of TRIE
    int frequency; //  number of occurrences
    String word; // the actual word stored
}
 
// A Min Heap
class MinHeap
{
    int capacity; // the total size a min heap
    int count; // indicates the number of slots filled.
    MinHeapNode []array; //  represents the collection of minHeapNodes
}
 


 

 =============================================
 package com;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;

public class KthOccurence {
	public static void main(String[] args) {
		String s[]={"a","a","a","b","b","b","c","c","c","d","d"};
		System.out.println(topKFrequent(s,2));
		System.out.println(topKFrequentHeap(s,2));
	}
	
	public static List<String> topKFrequent(String[] words, int k) {
    Map<String, Integer> count = new HashMap();
    for (String word: words) {
        count.put(word, count.getOrDefault(word, 0) + 1);
    }
    List<String> candidates = new ArrayList(count.keySet());
    Collections.sort(candidates, (w1, w2) -> count.get(w1).equals(count.get(w2)) ?
            w1.compareTo(w2) : count.get(w2) - count.get(w1));
System.out.println(candidates);
    return candidates.subList(0, k);
	}
	
  public static List<String> topKFrequentHeap(String[] words, int k) {
    Map<String, Integer> count = new HashMap();
    for (String word: words) {
        count.put(word, count.getOrDefault(word, 0) + 1);
    }
    PriorityQueue<String> heap = new PriorityQueue<String>(
            (w1, w2) -> count.get(w1).equals(count.get(w2)) ?
            w2.compareTo(w1) : count.get(w1) - count.get(w2) );
    
   

    for (String word: count.keySet()) {
        heap.offer(word);
        if (heap.size() > k) heap.poll();
    }
    System.out.println("heap:"+ heap);

    List<String> ans = new ArrayList();
    while (!heap.isEmpty()) ans.add(heap.poll());
    Collections.reverse(ans);
    return ans;
}

}

